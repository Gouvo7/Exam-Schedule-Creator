package thesis;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.TransferHandler;
import javax.swing.JComponent;


/**
 *
 * @author gouvo
 */
public class SceduleManager extends JFrame {

    public SceduleManager() {
        
    }
        
    public SceduleManager(Generator a) {
        initComponents();
        List<Professor> profs = a.getProfs();
        VisualElement professorElement = new VisualElement(profs.get(0));
        VisualElement classroomElement = new VisualElement(profs.get(1));
        System.out.println(profs.get(0).getProfFirstname());

        // Set layout manager for the frame
        this.setLayout(new FlowLayout());

        // Add elements to the frame
        this.add(professorElement);
        this.add(classroomElement);

        // Set up drag-and-drop for the visual elements
        this.addDragAndDrop(professorElement);
        this.addDragAndDrop(classroomElement);

        // Set frame properties
        setTitle("Object Visualization - Swing");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center the frame
        setVisible(true);
    }

    private void addDragAndDrop(Component component) {
        if (component instanceof JComponent) {
            JComponent jComponent = (JComponent) component;
            TransferHandler handler = new TransferHandler("object");
            jComponent.setTransferHandler(handler);

            component.addMouseMotionListener(new MouseMotionAdapter() {
                public void mouseDragged(MouseEvent e) {
                    JComponent c = (JComponent) e.getSource();
                    TransferHandler handler = c.getTransferHandler();
                    handler.exportAsDrag(c, e, TransferHandler.COPY);
                }
            });
        }
    }

    // Custom class for the visual representation
    private class VisualElement extends JComponent {
        private Object obj;

        public VisualElement(Object obj) {
            this.obj = obj;
            setPreferredSize(new Dimension(50, 50));

            // Set up transfer handler for drag-and-drop
            setTransferHandler(new TransferHandler("object"));

            // Add additional customization based on the type of object
            if (obj instanceof Professor) {
                setForeground(Color.RED);
            } else if (obj instanceof Classroom) {
                setForeground(Color.BLUE);
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(getForeground());
            g.fillOval(0, 0, getWidth(), getHeight());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SceduleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SceduleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SceduleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SceduleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SceduleManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

/**
 * Η κλάση MainForm είναι η κλάση που χρησιμοποιείται για το γραφικό περιβάλλον (user interface - UI) της εφαρμογής.
 * @author gouvo
 */

package thesis;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.gmele.general.exceptions.GmException;
import org.gmele.general.sheets.XlsxSheet;
import org.gmele.general.sheets.exception.SheetExc;
import static org.junit.Assert.assertThat;

/**
 * Η κλάση MainForm είναι η κλάση που χρησιμοποιείται για το γραφικό περιβάλλον (user interface - UI) της εφαρμογής.
 * @author gouvo
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm(){
        //GmException g = new GmException("Τα γάμησες",1,"ντάτα");
        initComponents();
        this.setLocationRelativeTo(null);
        this.show(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        go = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        jLabel1.setText("Output Path");

        jLabel4.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        jLabel4.setText("Input Path");

        jTextField1.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        jTextField1.setText("C:\\\\Users\\\\gouvo\\\\OneDrive\\\\Documents\\\\ΠΤΥΧΙΑΚΗ\\\\1) General.xlsx");
        jTextField1.setToolTipText("");
        jTextField1.setEnabled(false);

        jTextField2.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        jTextField2.setText("C:\\\\Users\\\\gouvo\\\\OneDrive\\\\Documents\\\\ΠΤΥΧΙΑΚΗ\\\\");
            jTextField2.setEnabled(false);

            go.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            go.setLabel("Produce Excel");
            go.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    goActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addGap(224, 224, 224)
                    .addComponent(go)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(103, 103, 103)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel4)
                        .addContainerGap(399, Short.MAX_VALUE)))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(93, 93, 93)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(59, 59, 59)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                    .addComponent(go)
                    .addGap(38, 38, 38))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel4)
                        .addContainerGap(300, Short.MAX_VALUE)))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        try {
            doThings();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_goActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void doThings() throws FileNotFoundException, IOException {
        
        
        String filename = jTextField1.getText();
        List<Professor> profs = new ArrayList<>();
        profs.addAll(getProfs(filename));
        System.out.println("Done reading teachers...");
        /*
        int c = 0;
        for (Professor currentProfessor : profs) {
            System.out.print("C is: " + c + " ");
            c++;
            currentProfessor.printText();
        }
        */
        List<String> timeslots = new ArrayList<>();
        timeslots.addAll(getTimeslots(filename));
        for (String currentProfessor : timeslots) {
            System.out.println(currentProfessor);
        }
        
        
        HashMap<String, String> dates = 
                new HashMap<String,String>(getDates(filename));
        
        for (Map.Entry<String, String> entry : dates.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            System.out.println("Key=" + key + ", Value=" + value);
        }
        
        createTemplate(profs,timeslots,dates, filename);
    }
    
    public HashMap<String, String> getDates(String f){
        try {
            FileInputStream file = new FileInputStream(new File(f));
            XlsxSheet s = new XlsxSheet(f);
            s.SelectSheet("DATES");
            HashMap<String, String> dates = new HashMap<String, String>();
            SimpleDateFormat inputDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
            SimpleDateFormat outputDateFormat = new SimpleDateFormat("dd/MM/yyyy");
            
            int rowIndex = 0;
            int lastRow = s.GetLastRow();
            System.out.println(lastRow);
            
            while (rowIndex <= lastRow){
                if (rowIndex != 0){
                    Date date;
                    try {
                        date = inputDateFormat.parse(s.GetCellDate(rowIndex, 0).toString());
                    } catch (ParseException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                        file.close();
                        return dates;
                    }
                    String cellA = outputDateFormat.format(date);
                    String cellB = s.GetCellString(rowIndex, 1);
                    if (check(cellA) && check(cellB)){
                        dates.put(cellA, cellB);
                    }else{
                        file.close();
                        return dates;
                    }
                }
                rowIndex++;
            }
            file.close();
            return dates;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SheetExc ex) {
            
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public List<String> getTimeslots(String f){
        try {
            FileInputStream file = new FileInputStream(new File(f));
            XlsxSheet s = new XlsxSheet(f);
            s.SelectSheet("TIMESLOTS");
            //Iterate through each rows one by one
            List<String> timeslots = new ArrayList<>();
            int rowIndex = 0;
            int lastRow = s.GetLastRow();
            
            while (rowIndex <= lastRow){
                if (rowIndex != 0){
                    String cellA = s.GetCellString(rowIndex, 0);
                    timeslots.add(cellA);
                }
                rowIndex++;
            }
            file.close();
            return timeslots;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SheetExc ex) {
            
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public List<Professor> getProfs(String f){
        try{
            
            FileInputStream file = new FileInputStream(new File(f));
            //XSSFWorkbook workbook = new XSSFWorkbook(f);
            XlsxSheet s = new XlsxSheet(f);
            s.SelectSheet("PROFESSORS_LIST");
            System.out.println(s.GetLastRow());
            int rowIndex = 0;
            int lastRow = s.GetLastRow();
            List<Professor> profs = new ArrayList<>();
            
            while (rowIndex <= lastRow){
                if (rowIndex != 0){
                    String cellA = s.GetCellString(rowIndex, 0);
                    String cellB = s.GetCellString(rowIndex, 1);
                    String cellC = s.GetCellString(rowIndex, 2);
                    System.out.println(cellA+ " " + cellB + " " + cellC);
                    Professor tmp = new Professor(cellA, cellB, cellC);
                    if (check(cellA) && check(cellB) &&  check(cellC)){
                        profs.add(tmp);
                    }
                    else{
                        file.close();
                        return profs;
                    }
                }
                rowIndex++;
            }
            for (Professor tmp : profs){
                tmp.printText();
            }

            file.close();
            return profs;
        }catch (IOException e){
            System.out.println("Could not read file");
            return null;
        }catch (SheetExc e){
            return null;
        }
    }
    
    public boolean check(String s){
        if(s!=null && !s.equals("")&& !s.equals(" ")){
            return true;
        }else{
            return false;
        }
    }
    
    public void createTemplate(List<Professor> p, List<String> t, HashMap<String,String> d, String f){

    }
}


